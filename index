<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Data Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 1200px;
            margin: auto;
            padding: 20px;
        }
        h1 {
            text-align: center;
        }
        .chart-container {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
        }
        .chart-box {
            width: 45%;
            margin-bottom: 30px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f4f4f4;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Weather Data Dashboard</h1>

        <div class="chart-container">
            <div class="chart-box">
                <canvas id="temperatureChart"></canvas>
            </div>
            <div class="chart-box">
                <canvas id="precipitationChart"></canvas>
            </div>
            <div class="chart-box">
                <canvas id="gduChart"></canvas>
            </div>
        </div>

        <h2>Summary Table</h2>
        <table>
            <thead>
                <tr>
                    <th>Location</th>
                    <th>Average Temperature (&deg;C)</th>
                    <th>Total Precipitation (mm)</th>
                    <th>GDU Accumulations</th>
                </tr>
            </thead>
            <tbody id="summaryTableBody">
                <!-- Data will be dynamically inserted here -->
            </tbody>
        </table>
    </div>

    <script>
        async function fetchWeatherData() {
            const apiKey = 'YOUR_API_KEY'; // Replace with your Visual Crossing API key
            const locations = ['New York', 'Los Angeles', 'Chicago', 'Houston']; // Example locations
            const temperatureData = [];
            const precipitationData = [];
            const gduData = [];

            for (const location of locations) {
                const response = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${location}?unitGroup=metric&key=${MY58AFKAGMVMKTYEQYASYMJLZ}`);
                const data = await response.json();

                const avgTemp = data.days.reduce((sum, day) => sum + day.temp, 0) / data.days.length;
                const totalPrecip = data.days.reduce((sum, day) => sum + (day.precip || 0), 0);
                const gduAccumulation = data.days.reduce((sum, day) => sum + (day.temp - 10 > 0 ? day.temp - 10 : 0), 0);

                temperatureData.push(avgTemp);
                precipitationData.push(totalPrecip);
                gduData.push(gduAccumulation);
            }

            updateCharts(locations, temperatureData, precipitationData, gduData);
            updateTable(locations, temperatureData, precipitationData, gduData);
        }

        function updateCharts(locations, temperatureData, precipitationData, gduData) {
            const ctxTemp = document.getElementById('temperatureChart').getContext('2d');
            const ctxPrecip = document.getElementById('precipitationChart').getContext('2d');
            const ctxGdu = document.getElementById('gduChart').getContext('2d');

            new Chart(ctxTemp, {
                type: 'line',
                data: {
                    labels: locations,
                    datasets: [{
                        label: 'Temperature (&deg;C)',
                        data: temperatureData,
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 2,
                        fill: false
                    }]
                }
            });

            new Chart(ctxPrecip, {
                type: 'bar',
                data: {
                    labels: locations,
                    datasets: [{
                        label: 'Precipitation (mm)',
                        data: precipitationData,
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                }
            });

            new Chart(ctxGdu, {
                type: 'line',
                data: {
                    labels: locations,
                    datasets: [{
                        label: 'GDU Accumulations',
                        data: gduData,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2,
                        fill: false
                    }]
                }
            });
        }

        function updateTable(locations, temperatureData, precipitationData, gduData) {
            const summaryTableBody = document.getElementById('summaryTableBody');
            summaryTableBody.innerHTML = '';
            locations.forEach((location, index) => {
                const row = `<tr>
                    <td>${location}</td>
                    <td>${temperatureData[index].toFixed(2)}</td>
                    <td>${precipitationData[index].toFixed(2)}</td>
                    <td>${gduData[index].toFixed(2)}</td>
                </tr>`;
                summaryTableBody.innerHTML += row;
            });
        }

        fetchWeatherData();
    </script>
</body>
</html>
